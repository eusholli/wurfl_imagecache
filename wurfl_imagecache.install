<?php
// $Id: wurfl_imagecache.install,v 1.25 2009/01/06 19:48:59 drewish Exp $

 function wurfl_imagecache_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  if ($phase == 'runtime') {

    $wurfl_imagecache_directory = file_create_path() .'/wurfl_imagecache';
    if (!file_check_directory($wurfl_imagecache_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      if (!is_dir($wurfl_imagecache_directory)) {
        $requirements['wurfl_imagecache_directory'] = array(
          'title' => $t('wurfl_ImageCache Directory'),
          'value' => $t('%p does not a directory or is not readable by the webserver.', array('%p' => $wurfl_imagecache_directory)),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      elseif (!is_writable($wurfl_imagecache_directory)) {
        $requirements['wurfl_imagecache_directory'] = array(
          'title' => $t('wurfl_ImageCache Directory'),
          'value' => $t('%p is not writeable by the webserver.', array('%p' => $wurfl_imagecache_directory)),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        $requirements['wurfl_imagecache_directory'] = array(
          'title' => $t('wurfl_ImageCache Directory'),
          'value' => $t('An unknown error occured.'),
          'description' => $t('An unknown error occured trying to verify %p is a directory and is writable.', array('%p' => $wurfl_imagecache_directory)),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }

    if (!is_writable(file_directory_temp())) {
      $requirements['wurfl_imagecache_directory'] = array(
        'title' => $t('wurfl_ImageCache Temp Directory'),
        'value' => $t('%p is not writeable by the webserver.', array('%p' => file_directory_temp())),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

function wurfl_imagecache_schema() {
    $schema['wurfl_imagecache_preset'] = array(
    'fields' => array(
      'presetid' => array(
        'description' => t('The primary identifier for an wurfl_imagecache_preset.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'presetname' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
    ),
    'primary key' => array('presetid'),
  );

  $schema['wurfl_imagecache_action'] = array(
    'fields' => array(
      'actionid' => array(
        'description' => t('The primary identifier for an wurfl_imagecache_action.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'presetid' => array(
        'description' => t('The primary identifier for an wurfl_imagecache_preset.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'weight' => array(
        'description' => t('The weight of the action in the preset.'),
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0),
      'module' => array(
        'description' => t('The module that defined the action.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'action' => array(
        'description' => t('The unique ID of the action to be executed.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE),
      'data' => array(
        'description' => t('The configuration data for the action.'),
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE),
    ),
    'primary key' => array('actionid'),
    'indexes' => array(
      'presetid' => array('presetid'),
    ),
  );



  return $schema;
}

/**
 * Implementation of hook_install().
 */
function wurfl_imagecache_install() {
  drupal_install_schema('wurfl_imagecache');
}

/**
 * Implementation of hook_uninstall().
 */
function wurfl_imagecache_uninstall() {
  // Remove any cached images.
  $path = file_directory_path() .'/wurfl_imagecache/';
  if (is_dir($path)) {
    _wurfl_imagecache_recursive_delete($path);
  }

  drupal_uninstall_schema('wurfl_imagecache');
}

// Add action id to actions table.
function wurfl_imagecache_update_1() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_actions} ADD COLUMN actionid INT UNSIGNED NOT NULL  primary key auto_increment');
  return $ret;
}

// Rename rulesets to presets; Make all table names singular;
function wurfl_imagecache_update_2() {
  $ret = array();
  $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_rulesets} RENAME TO {wurfl_imagecache_preset}');
  $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_actions} RENAME TO {wurfl_imagecache_action}');
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_preset} CHANGE rulesetid presetid INT UNSIGNED NOT NULL AUTO_INCREMENT');
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_preset} CHANGE rulesetname presetname VARCHAR(255) NOT NULL DEFAULT \'\'');
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_action} CHANGE rulesetid presetid  INTEGER NOT NULL DEFAULT 0');
      break;

    case 'pgsql':
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_preset} RENAME COLUMN rulesetid TO presetid');
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_preset} RENAME COLUMN rulesetname TO presetname');
      $ret[] = update_sql('ALTER TABLE {wurfl_imagecache_action} RENAME COLUMN rulesetid TO presetid');
      break;
  }
  return $ret;
}


/**
 * Remove auto-increment from tables, instead depending on the sequences table and db_next_id()
 */
function wurfl_imagecache_update_3() {
  $ret = array();

  $count_action = db_result(db_query('SELECT max(actionid) FROM {wurfl_imagecache_action}')) + 1;
  $count_preset = db_result(db_query('SELECT max(presetid) FROM {wurfl_imagecache_preset}')) + 1;

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_action} CHANGE actionid actionid INT UNSIGNED NOT NULL");
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_preset} CHANGE presetid presetid INT UNSIGNED NOT NULL");
      // Add the sequences
      $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{wurfl_imagecache_action}_actionid', $count_action)");
      $ret[] = update_sql("INSERT INTO {sequences} (name, id) VALUES ('{wurfl_imagecache_preset}_presetid', $count_preset)");
      break;
    case 'pgsql':
      db_change_column($ret, 'wurfl_imagecache_action', 'actionid', 'actionid', 'INT', $attributes = array('not null' => TRUE, 'default' => '0'));
      db_change_column($ret, 'wurfl_imagecache_preset', 'presetid', 'presetid', 'INT', $attributes = array('not null' => TRUE, 'default' => '0'));
      // Re-add our indexes
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_action} ADD PRIMARY KEY (actionid)");
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_preset} ADD PRIMARY KEY (rulesetid)");
      // Add the sequences
      $ret[] = update_sql("CREATE SEQUENCE {wurfl_imagecache_action}_actionid_seq INCREMENT 1 START $count_action;");
      $ret[] = update_sql("CREATE SEQUENCE {wurfl_imagecache_preset}_presetid_seq INCREMENT 1 START $count_preset;");
  }
  return $ret;
}

function wurfl_imagecache_update_4() {
  $ret = array();

   // add action column to the wurfl_imagecache_action table just becuase serialization bugs me.
   switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_action} ADD COLUMN action varchar(255) not null default '' after weight");
       break;
    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {wurfl_imagecache_action} ADD COLUMN action varchar(255) NOT NULL DEFAULT ''");
      break;
  }

  // unserialize what we can.
  $result = db_query("SELECT * FROM {wurfl_imagecache_action}");
  while ($row = db_fetch_array($result)) {
    $data = unserialize($row['data']);

    // remove function from data if present;
    $function = $data['function'];
    unset($data['function']);
    $data = serialize($data);

    // Rename scale and crop for any people who upgraded early...
    if ($function == 'scale and crop') {
      $function = 'scale_and_crop';
    }
    // Keep scale and crop and the old scale function seperate... I don't really want to break BC with
    // the 2.x update. We'll deprecate this version.
    if ($function == 'scale') {
      $function = 'deprecated_scale';
    }

    // prefix with module name as per new status quo.
    // since other modules couldn't implement actions before this update
    // we assume wurfl_imagecache...
    $function = 'wurfl_imagecache_'. $function;

    db_query("UPDATE {wurfl_imagecache_action} SET action='%s', data='%s' WHERE actionid = %d", $function, $data, $row['actionid']);
  }
  cache_clear_all('*', 'cache', TRUE);
  return $ret;
}

function wurfl_imagecache_update_5() {
  // enable image API.
  module_rebuild_cache(); // make sure new modules are in the system table.
  module_enable(array('imageapi', 'imageapi_gd', 'imageapi_imagemagick')); // enable our new module.

  // @todo: update formatter names: http://cvs.drupal.org/viewvc.py/drupal/contributions/modules/wurfl_imagecache/wurfl_imagecache.module?r1=1.68&r2=1.68.2.8&pathrev=DRUPAL-5--2
  // ln: 516 diff 511.

  return array();
}

/**
 * Upgrade from Drupal 5 => Drupal 6.
 *
 * Use serial data type for primary keys.  Add module field and presetid index.
 */
function wurfl_imagecache_update_6000() {
  $ret = array();

  // Our additions to the schema.
  $schema['wurfl_imagecache_preset'] = array(
    'fields' => array(
      'presetid' => array(
        'description' => t('The primary identifier for an wurfl_imagecache_preset.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('presetid'),
  );
  $schema['wurfl_imagecache_action'] = array(
    'fields' => array(
      'actionid' => array(
        'description' => t('The primary identifier for an wurfl_imagecache_action.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => t('The module that defined the action.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'initial' => 'wurfl_imagecache',
      ),
    ),
    'primary key' => array('actionid'),
  );

  // Update primary keys to serial type for Drupal 6
  foreach ($schema as $table => $info) {
    $field = $info['primary key'][0];
    if (db_table_exists('sequences')) {
      $ret[] = update_sql("DELETE FROM {sequences} WHERE name = '{{$table}}_{$field}'");
    }
    db_change_field($ret, $table, $field, $field, $info['fields'][$field]);
  }

  // Going to assume that if the table doesn't have a module column that
  // it needs the index as well.
  if (!db_column_exists('wurfl_imagecache_action', 'module')) {
    // Add 'module' column to action table.
    db_add_field($ret, 'wurfl_imagecache_action', 'module', $schema['wurfl_imagecache_action']['fields']['module']);

    // Add 'presetid' index to action table
    db_add_index($ret, 'wurfl_imagecache_action', 'presetid', array('presetid'));
  }


  return $ret;
}
